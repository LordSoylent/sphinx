// Copyright (c) 2012-2014 The Bitcoin developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "clientverssphx.h"

#include "tinyformat.h"

#include <string>

/**
 * Name of client reported in the 'verssphx' message. Report the same name
 * for both sphxd and sphx-qt, to make it harder for attackers to
 * target servers or GUI users specifically.
 */
const std::string CLIENT_NAME("Sphinxcoin Core");

/**
 * Client verssphx number
 */
#define CLIENT_VERSSPHX_SUFFIX "-BRIDGE"


/**
 * The following part of the code determines the CLIENT_BUILD variable.
 * Several mechanisms are used for this:
 * * first, if HAVE_BUILD_INFO is defined, include build.h, a file that is
 *   generated by the build environment, possibly containing the output
 *   of git-describe in a macro called BUILD_DESC
 * * secondly, if this is an exported verssphx of the code, GIT_ARCHIVE will
 *   be defined (automatically using the export-subst git attribute), and
 *   GIT_COMMIT will contain the commit id.
 * * then, three options exist for determining CLIENT_BUILD:
 *   * if BUILD_DESC is defined, use that literally (output of git-describe)
 *   * if not, but GIT_COMMIT is defined, use v[maj].[min].[rev].[build]-g[commit]
 *   * otherwise, use v[maj].[min].[rev].[build]-unk
 * finally CLIENT_VERSSPHX_SUFFIX is added
 */

//! First, include build.h if requested
#ifdef HAVE_BUILD_INFO
#include "build.h"
#endif

//! git will put "#define GIT_ARCHIVE 1" on the next line inside archives.
#ifdef GIT_ARCHIVE
#define GIT_COMMIT_ID "cbcb549"
#define GIT_COMMIT_DATE "Tue, 9 Feb 2016 16:54:57 -0500"
#endif

#define BUILD_DESC_WITH_SUFFIX(maj, min, rev, build, suffix) \
    "v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-" DO_STRINGIZE(suffix)

#define BUILD_DESC_FROM_COMMIT(maj, min, rev, build, commit) \
    "v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-g" commit

#define BUILD_DESC_FROM_UNKNOWN(maj, min, rev, build) \
    "v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-unk"

#ifndef BUILD_DESC
#ifdef BUILD_SUFFIX
#define BUILD_DESC BUILD_DESC_WITH_SUFFIX(CLIENT_VERSSPHX_MAJOR, CLIENT_VERSSPHX_MINOR, CLIENT_VERSSPHX_REVISSPHX, CLIENT_VERSSPHX_BUILD, BUILD_SUFFIX)
#elif defined(GIT_COMMIT_ID)
#define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSSPHX_MAJOR, CLIENT_VERSSPHX_MINOR, CLIENT_VERSSPHX_REVISSPHX, CLIENT_VERSSPHX_BUILD, GIT_COMMIT_ID)
#else
#define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSSPHX_MAJOR, CLIENT_VERSSPHX_MINOR, CLIENT_VERSSPHX_REVISSPHX, CLIENT_VERSSPHX_BUILD)
#endif
#endif

#ifndef BUILD_DATE
#ifdef GIT_COMMIT_DATE
#define BUILD_DATE GIT_COMMIT_DATE
#else
#define BUILD_DATE __DATE__ ", " __TIME__
#endif
#endif

const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSSPHX_SUFFIX);
const std::string CLIENT_DATE(BUILD_DATE);

static std::string FormatVerssphx(int nVerssphx)
{
    if (nVerssphx % 100 == 0)
        return strprintf("%d.%d.%d", nVerssphx / 1000000, (nVerssphx / 10000) % 100, (nVerssphx / 100) % 100);
    else
        return strprintf("%d.%d.%d.%d", nVerssphx / 1000000, (nVerssphx / 10000) % 100, (nVerssphx / 100) % 100, nVerssphx % 100);
}

std::string FormatFullVerssphx()
{
    return CLIENT_BUILD;
}

/** 
 * Format the subverssphx field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki) 
 */
std::string FormatSubVerssphx(const std::string& name, int nClientVerssphx, const std::vector<std::string>& comments)
{
    std::ostringstream ss;
    ss << "/";
    ss << name << ":" << FormatVerssphx(nClientVerssphx);
    if (!comments.empty()) {
        std::vector<std::string>::const_iterator it(comments.begin());
        ss << "(" << *it;
        for (++it; it != comments.end(); ++it)
            ss << "; " << *it;
        ss << ")";
    }
    ss << "/";
    return ss.str();
}
